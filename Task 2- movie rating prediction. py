# Task 2 - Movie Rating Prediction using Python
# Author: Siva Rudra V

# -----------------------------------------
# ðŸ“Œ 1. Import Libraries
# -----------------------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# -----------------------------------------
# ðŸ“Œ 2. Load Dataset
# -----------------------------------------
df = pd.read_csv("tmdb_5000_movies.csv")
print("Dataset shape:", df.shape)
df.head()

# -----------------------------------------
# ðŸ“Œ 3. Select Important Features
# -----------------------------------------
df = df[['budget', 'popularity', 'runtime', 'vote_average']]
df.dropna(inplace=True)

# -----------------------------------------
# ðŸ“Œ 4. Data Visualization
# -----------------------------------------
plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

# -----------------------------------------
# ðŸ“Œ 5. Define Features and Target
# -----------------------------------------
X = df[['budget', 'popularity', 'runtime']]
y = df['vote_average']

# -----------------------------------------
# ðŸ“Œ 6. Split Data
# -----------------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -----------------------------------------
# ðŸ“Œ 7. Train Linear Regression Model
# -----------------------------------------
model = LinearRegression()
model.fit(X_train, y_train)

# -----------------------------------------
# ðŸ“Œ 8. Predict & Evaluate
# -----------------------------------------
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print("Model Performance:")
print("RÂ² Score:", round(r2, 2))
print("RMSE:", round(rmse, 2))

# -----------------------------------------
# ðŸ“Œ 9. Visualization - Actual vs Predicted
# -----------------------------------------
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, color='orange', edgecolors='k')
plt.plot([0, 10], [0, 10], color='blue', linestyle='--')
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs Predicted Movie Ratings")
plt.grid(True)
plt.savefig("output_plot.png")  # Save the plot image
plt.show()
